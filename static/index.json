[{"location":"search/","title":"","text":"","tags":null},{"location":"apps/","title":"","text":"","tags":null},{"location":"inversion-of-control/","title":"","text":"","tags":null},{"location":"","title":"Hiboot Framework","text":"p align=\"center\"\n  a href=\"https://travis-ci.org/hidevopsio/hiboot?branch=master\"\n    img src=\"https://travis-ci.org/hidevopsio/hiboot.svg?branch=master\" alt=\"Build Status\"/\n  /a\n  a href=\"https://codecov.io/gh/hidevopsio/hiboot\"\n    img src=\"https://codecov.io/gh/hidevopsio/hiboot/branch/master/graph/badge.svg\" /\n  /a\n  a href=\"https://opensource.org/licenses/Apache-2.0\"\n      img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg\" /\n  /a\n  a href=\"https://goreportcard.com/report/github.com/hidevopsio/hiboot\"\n      img src=\"https://goreportcard.com/badge/github.com/hidevopsio/hiboot\" /\n  /a\n  a href=\"https://godoc.org/github.com/hidevopsio/hiboot\"\n      img src=\"https://godoc.org/github.com/golang/gddo?status.svg\" /\n  /a\n  a href=\"https://gitter.im/hidevopsio/hiboot\"\n      img src=\"https://img.shields.io/badge/GITTER-join%20chat-green.svg\" /\n  /a\n/p\n\nAbout \n\nHiboot is a high performance web and cli application framework with dependency injection\n\nHiboot is not trying to reinvent everything, it integrates the popular libraries but make them simpler, easier to use. It borrowed some of the Spring features like dependency injection, aspect oriented programming, and auto configuration. You can integrate any other libraries easily by auto configuration with dependency injection support.\n\nOverview\n\nWeb MVC (Model-View-Controller).\nAuto Configuration, pre-create instance with properties configs for dependency injection.\nDependency injection with struct tag name inject:\"\" or Constructor func.\n\nFeatures\n\nApps\n    cli - command line application\n    web - web application\n\nStarters\n    actuator - health check\n    locale - locale starter\n    logging - customized logging settings\n    jwt - jwt starter\n    grpc - grpc application starter\n\nTags\n    inject - inject generic instance into object\n    default - inject default value into struct object \n    value - inject string value or references / variables into struct string field\n\nUtils \n    cmap - concurrent map\n    copier - copy between struct\n    crypto - aes, base64, md5, and rsa encryption / decryption\n    gotest - go test util\n    idgen - twitter snowflake id generator\n    io - file io util\n    mapstruct - convert map to struct\n    replacer - replacing stuct field value with references or environment variables\n    sort - sort slice elements\n    str - string util enhancement util\n    validator - struct field validation","tags":null},{"location":"getting-started/","title":"Getting started","text":"Quick start web application\n\nThis section will show you how to create and run a simple hiboot application. Letâ€™s get started!\n\nGet the source code\n\ngo get -u github.com/hidevopsio/hiboot\n\ncd $GOPATH/src/github.com/hidevopsio/hiboot/examples/web/helloworld/\n\nSample code\n\nBelow is the simplest web application in Go.\n\n// Line 1: main package\npackage main\n\n// Line 2: import web starter from hiboot\nimport \"github.com/hidevopsio/hiboot/pkg/app/web\"\n\n// Line 3-5: RESTful Controller, derived from web.Controller. The context mapping of this controller is '/' by default\ntype Controller struct {\n\tweb.Controller\n}\n\n// Line 6-8: Get method, the context mapping of this method is '/' by default\n// the Method name Get means that the http request method is GET\nfunc (c Controller) Get() string {\n\t// response data\n\treturn \"Hello world\"\n}\n\n// Line 9-11: main function\nfunc main() {\n\t// create new web application and run it\n\tweb.NewApplication(\u0026Controller{}).Run()\n}\n\nRun web application\n\ndep ensure\n\ngo run main.go\n\nTesting the API by curl\n\ncurl http://localhost:8080/\n\nOutput:\n\nHello, world\n\nQuick start cli application\n\nWriting Hiboot cli application is as simple as web application, you can take the advantage of dependency injection introduced by Hiboot.\n\n// import cli starter and fmt\nimport (\n\t\"fmt\"\n\t\"github.com/hidevopsio/hiboot/pkg/app\"\n\t\"github.com/hidevopsio/hiboot/pkg/app/cli\"\n)\n\n// define the command\ntype rootCommand struct {\n\t// embedding cli.BaseCommand in each command\n\tcli.BaseCommand\n\tTo string\n}\n\nfunc newRootCommand() rootCommand {\n\tc := new(rootCommand)\n\tc.Use = \"hello\"\n\tc.Short = \"hello command\"\n\tc.Long = \"run hello command for getting started\"\n\tc.Example = `\nhello -h : help\nhello -t John : say hello to John\n`\n\tc.PersistentFlags().StringVarP(\u0026c.To, \"to\", \"t\", \"world\", \"e.g. --to=world or -t world\")\n\treturn c\n}\n\n// Run run the command\nfunc (c *rootCommand) Run(args []string) error {\n\tfmt.Printf(\"Hello, %v\\n\", c.To)\n\treturn nil\n}\n\n// main function\nfunc main() {\n\t// create new cli application and run it\n\tcli.NewApplication(newRootCommand).\n\t\tSetProperty(app.PropertyBannerDisabled, true).\n\t\tRun()\n}\n\nRun cli application\n\ndep ensure\n\ngo run main.go\n\nHello, world\n\nBuild the cli application and run\n\ngo build\n\nLet's get help\n\n./hello --help\n\nrun hello command for getting started\n\nUsage:\n  hello [flags]\n\nFlags:\n  -h, --help        help for hello\n  -t, --to string   e.g. --to=world or -t world (default \"world\")\n\nGreeting to Hiboot\n\n./hello --to Hiboot\n\nHello, Hiboot\n`","tags":null}]